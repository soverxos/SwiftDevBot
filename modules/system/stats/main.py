# modules/system/stats/main.py
from core.module_api import ModuleInterface, ModuleMetadata
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
import logging
import yaml
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional
import asyncio
from collections import defaultdict
import matplotlib.pyplot as plt
import io
import pandas as pd

class StatsService:
    def __init__(self, kernel):
        self.kernel = kernel
        self.logger = logging.getLogger('stats')
        self.db = kernel.get_service('database')

        # –ö—ç—à –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç

        # –°—á–µ—Ç—á–∏–∫–∏ –≤ –ø–∞–º—è—Ç–∏
        self.counters = defaultdict(int)
        self.gauges = defaultdict(float)

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        asyncio.create_task(self._periodic_save())

    async def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        queries = [
            """
            CREATE TABLE IF NOT EXISTS stats_metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metric TEXT NOT NULL,
                value REAL NOT NULL,
                tags TEXT,
                period TEXT
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS stats_events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                event_type TEXT NOT NULL,
                user_id INTEGER,
                chat_id INTEGER,
                details TEXT
            )
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_metrics_timestamp
            ON stats_metrics(timestamp)
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_metrics_metric
            ON stats_metrics(metric)
            """
        ]

        for query in queries:
            await self.db.execute(query)

    async def increment(self, metric: str, value: float = 1, tags: Dict = None):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        self.counters[metric] += value
        await self._save_metric(metric, value, tags, 'counter')

    async def gauge(self, metric: str, value: float, tags: Dict = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏"""
        self.gauges[metric] = value
        await self._save_metric(metric, value, tags, 'gauge')

    async def event(self, event_type: str, user_id: int = None,
                   chat_id: int = None, details: Dict = None):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è"""
        query = """
        INSERT INTO stats_events
        (event_type, user_id, chat_id, details)
        VALUES (?, ?, ?, ?)
        """
        await self.db.execute(
            query,
            (event_type, user_id, chat_id, json.dumps(details) if details else None)
        )

    async def _save_metric(self, metric: str, value: float,
                          tags: Dict = None, period: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î"""
        query = """
        INSERT INTO stats_metrics (metric, value, tags, period)
        VALUES (?, ?, ?, ?)
        """
        await self.db.execute(
            query,
            (metric, value, json.dumps(tags) if tags else None, period)
        )

    async def _periodic_save(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        while True:
            try:
                await asyncio.sleep(60)  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                for metric, value in self.counters.items():
                    await self._save_metric(
                        metric, value, None, 'minute'
                    )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º gauge –º–µ—Ç—Ä–∏–∫–∏
                for metric, value in self.gauges.items():
                    await self._save_metric(
                        metric, value, None, 'minute'
                    )

                # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                self.counters.clear()

            except Exception as e:
                self.logger.error(f"Error in periodic save: {e}")

    async def get_metric_stats(self, metric: str,
                             period: str = 'day',
                             from_date: datetime = None,
                             to_date: datetime = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–µ"""
        if not from_date:
            from_date = datetime.now() - timedelta(days=1)
        if not to_date:
            to_date = datetime.now()

        cache_key = f"{metric}:{period}:{from_date}:{to_date}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.cache:
            cache_time, data = self.cache[cache_key]
            if datetime.now().timestamp() - cache_time < self.cache_ttl:
                return data

        query = """
        SELECT timestamp, SUM(value) as value
        FROM stats_metrics
        WHERE metric = ? AND timestamp BETWEEN ? AND ?
        GROUP BY strftime(?, timestamp)
        ORDER BY timestamp
        """

        # –§–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        group_format = {
            'hour': '%Y-%m-%d %H',
            'day': '%Y-%m-%d',
            'week': '%Y-%W',
            'month': '%Y-%m'
        }.get(period, '%Y-%m-%d')

        results = await self.db.fetch_all(
            query,
            (metric, from_date.isoformat(), to_date.isoformat(), group_format)
        )

        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.cache[cache_key] = (datetime.now().timestamp(), results)
        return results

    async def get_event_stats(self, event_type: str = None,
                            from_date: datetime = None,
                            to_date: datetime = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º"""
        conditions = []
        params = []

        query = "SELECT * FROM stats_events"

        if event_type:
            conditions.append("event_type = ?")
            params.append(event_type)

        if from_date:
            conditions.append("timestamp >= ?")
            params.append(from_date.isoformat())

        if to_date:
            conditions.append("timestamp <= ?")
            params.append(to_date.isoformat())

        if conditions:
            query += " WHERE " + " AND ".join(conditions)

        query += " ORDER BY timestamp DESC"

        return await self.db.fetch_all(query, tuple(params))

    async def generate_chart(self, metric: str, period: str = 'day') -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏"""
        data = await self.get_metric_stats(metric, period)

        if not data:
            return None

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'])

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(df['timestamp'], df['value'])
        plt.title(f'Statistics for {metric}')
        plt.xlabel('Time')
        plt.ylabel('Value')
        plt.grid(True)

        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        plt.xticks(rotation=45)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)
        plt.close()

        return buf.getvalue()

class Module(ModuleInterface):
    async def setup(self, kernel):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        self.kernel = kernel
        self.logger = logging.getLogger('system.stats')

        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = StatsService(kernel)
        await self.stats._create_tables()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        await kernel.get_service('registry').register_service(
            'stats',
            self.stats
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        commands = [
            ('stats', self.stats_menu, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'),
        ]

        for cmd, handler, desc in commands:
            self.kernel._bot.add_handler(CommandHandler(cmd, handler))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
        self.kernel._bot.add_handler(
            CallbackQueryHandler(self.button_callback, pattern='^stats_')
        )

        self.logger.info("Stats module initialized")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("Stats module cleaned up")

    async def stats_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not await self.kernel.get_service('security').check_permission(
            update.effective_user.id, 'admin'
        ):
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        keyboard = [
            [
                InlineKeyboardButton("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="stats_users"),
                InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="stats_messages")
            ],
            [
                InlineKeyboardButton("‚ö°Ô∏è –ö–æ–º–∞–Ω–¥—ã", callback_data="stats_commands"),
                InlineKeyboardButton("üìà –ù–∞–≥—Ä—É–∑–∫–∞", callback_data="stats_load")
            ],
            [
                InlineKeyboardButton("üìã –û—Ç—á—ë—Ç", callback_data="stats_report")
            ]
        ]

        await update.message.reply_text(
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\\n\\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if not await self.kernel.get_service('security').check_permission(
            query.from_user.id, 'admin'
        ):
            return

        action = query.data.split('_')[1]

        if action == "users":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            data = await self.stats.get_metric_stats('users.active')
            chart = await self.stats.generate_chart('users.active')

            if chart:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=chart,
                    caption="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
                )
            else:
                await query.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        elif action == "messages":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            data = await self.stats.get_metric_stats('messages.count')
            chart = await self.stats.generate_chart('messages.count')

            if chart:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=chart,
                    caption="üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
                )
            else:
                await query.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        elif action == "commands":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
            events = await self.stats.get_event_stats('command')

            if events:
                commands = defaultdict(int)
                for event in events:
                    if details := json.loads(event['details'] or '{}'):
                        cmd = details.get('command')
                        if cmd:
                            commands[cmd] += 1

                text = "‚ö°Ô∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\\n\\n"
                for cmd, count in sorted(
                    commands.items(),
                    key=lambda x: x[1],
                    reverse=True
                )[:10]:
                    text += f"/{cmd}: {count} —Ä–∞–∑\\n"

                await query.message.reply_text(text, parse_mode='Markdown')
            else:
                await query.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        elif action == "load":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
            data = await self.stats.get_metric_stats('system.cpu')
            chart = await self.stats.generate_chart('system.cpu')

            if chart:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=chart,
                    caption="üìà –ó–∞–≥—Ä—É–∑–∫–∞ CPU –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
                )
            else:
                await query.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        elif action == "report":
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            report = "üìã *–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç*\\n\\n"

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            users = await self.kernel.get_service('database').fetch_one(
                "SELECT COUNT(*) as count FROM users"
            )
            report += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users['count']}\\n"

            # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏
            messages = await self.stats.get_metric_stats('messages.count', period='day')
            total_messages = sum(m['value'] for m in messages)
            report += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á: {total_messages}\\n"

            # –ö–æ–º–∞–Ω–¥—ã –∑–∞ —Å—É—Ç–∫–∏
            commands = await self.stats.get_event_stats(
                'command',
                from_date=datetime.now() - timedelta(days=1)
            )
            report += f"‚ö°Ô∏è –ö–æ–º–∞–Ω–¥ –∑–∞ 24—á: {len(commands)}\\n"

            # –û—à–∏–±–∫–∏ –∑–∞ —Å—É—Ç–∫–∏
            errors = await self.kernel.get_service('logger').get_logs(
                level='ERROR',
                start_date=datetime.now() - timedelta(days=1)
            )
            report += f"‚ùå –û—à–∏–±–æ–∫ –∑–∞ 24—á: {len(errors)}\\n"

            await query.message.reply_text(report, parse_mode='Markdown')
