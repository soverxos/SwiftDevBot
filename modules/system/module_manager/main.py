# modules/system/module_manager/main.py
from core.module_api import ModuleInterface
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, CommandHandler, ContextTypes
import yaml
from pathlib import Path
import logging

class Module(ModuleInterface):
    async def setup(self, kernel):
        self.kernel = kernel
        self.logger = logging.getLogger('module_manager')

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        await kernel.get_service('registry').register_command(
            'system.module_manager',
            'modules',
            self.modules_command
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
        self.kernel._bot.add_handler(
            CallbackQueryHandler(self.button_callback, pattern='^module_')
        )

    async def cleanup(self):
        pass

    async def modules_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏"""
        if not await self._check_admin(update.effective_user.id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏!")
            return

        keyboard = await self._get_modules_keyboard()
        await update.message.reply_text(
            "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏\\n\\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–æ–¥—É–ª–∏ –±–æ—Ç–∞.\\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞!",
            reply_markup=keyboard
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if not await self._check_admin(query.from_user.id):
            return

        data = query.data.split('_')
        action = data[1]
        module_name = '_'.join(data[2:])

        if action == 'toggle':
            success = await self._toggle_module(module_name)
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = await self._get_modules_keyboard()
                await query.message.edit_reply_markup(reply_markup=keyboard)

                status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if await self._is_module_enabled(module_name) else "–æ—Ç–∫–ª—é—á–µ–Ω ‚ùå"
                await query.message.reply_text(f"–ú–æ–¥—É–ª—å {module_name} {status}")
            else:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è")

    async def _get_modules_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–æ–¥—É–ª—è–º–∏"""
        keyboard = []
        modules_path = Path("modules")
        config = await self._load_config()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        for module_dir in modules_path.glob("**/main.py"):
            module_name = str(module_dir.parent.relative_to(modules_path))
            if module_name.startswith('__'): continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º–Ω—ã–º
            is_system = module_name.startswith('system')
            enabled = await self._is_module_enabled(module_name)

            status = "‚úÖ" if enabled else "‚ùå"
            system_mark = "üîí" if is_system else ""

            keyboard.append([InlineKeyboardButton(
                f"{system_mark}{module_name} {status}",
                callback_data=f"module_toggle_{module_name}"
            )])

        return InlineKeyboardMarkup(keyboard)

    async def _toggle_module(self, module_name: str) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è"""
        try:
            config = await self._load_config()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º–Ω—ã–º
            if module_name.startswith('system'):
                required_modules = config['modules'].get('required', [])
                if module_name in required_modules:
                    return False

            disabled_modules = config['modules'].get('disabled', [])

            if module_name in disabled_modules:
                disabled_modules.remove(module_name)
            else:
                disabled_modules.append(module_name)

            config['modules']['disabled'] = disabled_modules

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self._save_config(config)

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á–µ–Ω
            if module_name not in disabled_modules:
                await self.kernel.reload_module(module_name)

            return True

        except Exception as e:
            self.logger.error(f"Error toggling module {module_name}: {e}")
            return False

    async def _is_module_enabled(self, module_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å"""
        config = await self._load_config()
        return module_name not in config['modules'].get('disabled', [])

    async def _check_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        config = await self._load_config()
        return user_id in config['bot']['admins']

    async def _load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open("config.yml", 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)

    async def _save_config(self, config: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open("config.yml", 'w', encoding='utf-8') as f:
            yaml.dump(config, f, allow_unicode=True)
